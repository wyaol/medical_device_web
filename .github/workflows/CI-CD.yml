name: medical_device_web 项目文件对应 CI/CD 工作流

on:
  push:
    branches:
      - '*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      SSH_PASSWORD: wY74108520
      SERVER_IP: 110.41.165.162
      SERVER_PORT: 2022
      PROJECT_PATH: /root/medical_device/medical_device_web

    steps:
      - name: 检查代码库
        uses: actions/checkout@v4

      - name: 安装 Docker Compose,rsync,sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose rsync sshpass

      - name: 建立 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: 构建并推送 Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

      - name: 测试SSH连接
        run: |
          echo "Testing SSH connection to ${{ env.SERVER_IP }} on port ${{ env.SERVER_PORT }}"
          sshpass -p "${{ env.SSH_PASSWORD }}" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ env.SERVER_PORT }} root@${{ env.SERVER_IP }} "echo 'Connection successful'"

      - name: 使用rsync同步文件到服务器
        run: |
          sshpass -p "${{ env.SSH_PASSWORD }}" rsync -avz -e "ssh -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no" ./ root@${{ env.SERVER_IP }}:${{ env.PROJECT_PATH }}

      - name: 确保目标目录存在并具有适当权限
        run: |
          sshpass -p "${{ env.SSH_PASSWORD }}" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ env.SERVER_PORT }} root@${{ env.SERVER_IP }} "mkdir -p ${{ env.PROJECT_PATH }} && chmod 700 ${{ env.PROJECT_PATH }}"

      - name: 构建前端项目并打包
        run: |
          docker run --rm -v ${{ env.PROJECT_PATH }}:/app -w /app node:21.6 npm install
          docker run --rm -v ${{ env.PROJECT_PATH }}:/app -w /app node:21.6 npm run build

      - name: 部署在服务器上
        run: |
          sshpass -p "${{ env.SSH_PASSWORD }}" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ env.SERVER_PORT }} root@${{ env.SERVER_IP }} <<EOF
          cd ${{ env.PROJECT_PATH }}
          docker-compose pull
          docker-compose up -d
          EOF
